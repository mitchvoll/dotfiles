"""""""""""""""""""""""""""""
" Mitch Vollebregt .vimrc profile
" Sept 29, 2015
"""""""""""""""""""""""""""""

" Dependencies
" vim-plug https://github.com/junegunn/vim-plug
" fzf https://github.com/junegunn/fzf
" ag https://github.com/ggreer/the_silver_searcher
" sourcecode pro font
"

""""""""""""""""""""""""""
" Plug settings
""""""""""""""""""""""""""
set nocompatible

call plug#begin('~/.vim/plugged')

Plug 'edkolev/tmuxline.vim'
Plug 'vim-airline/vim-airline'
Plug 'mattn/emmet-vim'
Plug 'scrooloose/nerdTree'
Plug 'crusoexia/vim-dracula'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Lokaltog/vim-easymotion'
Plug 'terryma/vim-multiple-cursors'
Plug 'jiangmiao/auto-pairs'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'vim-ruby/vim-ruby'
Plug 'mileszs/ack.vim'
Plug 'posva/vim-vue'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-rails'
Plug 'romainl/vim-qf'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jparise/vim-graphql'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-compe'
Plug 'janko/vim-test'
Plug 'ojroques/nvim-lspfuzzy'
Plug 'tpope/vim-dispatch'

call plug#end()


""""""""""""""""""""""""""
" Custom settings
""""""""""""""""""""""""""
" fzf searching settings
nmap <C-p> :GFiles -- . ':!:*.rbi'<CR>
nmap <C-o> :Buffers<CR>

nmap <C-_> :Ag <CR>
nmap <silent> <C-f> :Ag <C-R><C-W><CR>

nmap <C-h> :History

let g:fzf_layout = { 'down': '~20%' }
let g:fzf_preview_window = 'right:40%'

" set regex to old engine for better ruby performance
set re=1

" ctrlp
"set runtimepath^=~/.vim/bundle/ctrlp.vim
"let g:ctrlp_max_files = 25000
"let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" close buffer with \q
nmap <leader>q :bp<cr>:bd #<cr>

" toggle git gutter with \g
nmap <leader>g :GitGutterToggle<cr>

" toggle spelling use \s
imap <Leader>s <C-o>:setlocal spell! spelllang=en_us<CR>
nmap <Leader>s :setlocal spell! spelllang=en_us<CR>

" start relative numbering
function! NumberToggle()
  if(&relativenumber == 1)
    set nornu
  else
    set relativenumber
  endif
endfunc

nnoremap <leader>r :call NumberToggle()<cr>
nnoremap <C-b> :call NumberToggle()<cr>
:au FocusLost * :set nornu
:au FocusGained * :set relativenumber
" end relative numbering

" nerdtree settings
""""""""""""""""""""""""""
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-t> :NERDTreeToggle<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" General settings
"""""""""""""""""""""""""""
color dracula
"colorscheme material-theme
syntax on  "Enables syntax highlighting for programming languages

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t' "only show filename in buffer
set laststatus=2
let g:tmuxline_powerline_separators = 0
let g:airline_powerline_fonts = 1

" Tab and shift tab cycle through buffers
nmap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
nmap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

set timeoutlen=1000 "Improve speed
set ttimeoutlen=0 "Improve speed
set noswapfile "No swapfile
set t_Co=256
set t_ut= "Fix issue with background of lines being different colour than screen background
set clipboard=unnamed "Copy paste across vim sessions"
set mouse=a  "Allows you to click around the text editor with your mouse to move the cursor
set showmatch "Highlights matching brackets in programming languages
set autoindent  "If you're indented, new lines will also be indented
set cindent  "Automatically indents lines after opening a bracket in programming languages
set number  "Enables line numbering
set smarttab  "Improves tabbing
set shiftwidth=2  "Assists code formatting
set expandtab
set backspace=2  "This makes the backspace key function like it does in other programs.
set tabstop=2  "How much space Vim gives to a tab
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:· "list bad spaces
set hidden "Maintain buffer data to allow undo after switching buffers
set smartcase "Search case sensitive and fallback on insensitive"
set hlsearch "Highlight while searching
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"Language specific indents
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype eruby setlocal ts=2 sts=2 sw=2
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype js setlocal ts=2 sts=2 sw=2
autocmd Filetype python setlocal ts=4 sts=4 sw=4

"Language specific style
au BufReadPost *.tsx set syntax=javascript
au BufReadPost *.ts set syntax=javascript

" Fade out sorbet signatures
augroup format_ruby
  autocmd Syntax ruby syn region sorbetSig start='sig {' end='}'
  autocmd Syntax ruby syn region sorbetSig start='sig do' end='end'
  autocmd Syntax ruby hi def link sorbetSig Comment
augroup END

" LSP
lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<leader><leader>', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)

end

-- Shopify's rubocop lsp
local configs = require 'lspconfig/configs'
local util = require 'lspconfig/util'
configs.rubocop = {
  name = "Rubocop",
  default_config = {
    root_dir = util.root_pattern('Gemfile', '.git'),
    cmd = { "bundle", "exec", "rubocop-lsp" },
    filetypes = { "ruby" },
  },
}

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "sorbet", "rust_analyzer", "tsserver", "rubocop" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF

lua <<EOF
require('lspfuzzy').setup {
  methods = 'all',         -- either 'all' or a list of LSP methods (see below)
  jump_one = true,         -- jump immediately if there is only one location
  callback = nil,          -- callback called after jumping to a location
  fzf_preview = {          -- arguments to the FZF '--preview-window' option
    'right:+{2}-/2'          -- preview on the right and centered on entry
  },
  fzf_action = {           -- FZF actions
    ['ctrl-t'] = 'tabedit',  -- go to location in a new tab
    ['ctrl-v'] = 'vsplit',   -- go to location in a vertical split
    ['ctrl-x'] = 'split',    -- go to location in a horizontal split
  },
  fzf_modifier = ':~:.',   -- format FZF entries, see |filename-modifiers|
  fzf_trim = true,         -- trim FZF entries
}
EOF


" Compe
set completeopt=menuone,noselect

lua <<EOF
require'compe'.setup {
  source = {
    path = true;
    buffer = true;
    calc = true;
    nvim_lsp = true;
    nvim_lua = true;
    vsnip = true;
    ultisnips = true;
    luasnip = true;
  };
}

local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
    local col = vim.fn.col('.') - 1
    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil
end

-- Use (s-)tab to:
--- move to prev/next item in completion menuone
--- jump to prev/next snippet's placeholder
_G.tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-n>"
  elseif vim.fn['vsnip#available'](1) == 1 then
    return t "<Plug>(vsnip-expand-or-jump)"
  elseif check_back_space() then
    return t "<Tab>"
  else
    return vim.fn['compe#complete']()
  end
end
_G.s_tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-p>"
  elseif vim.fn['vsnip#jumpable'](-1) == 1 then
    return t "<Plug>(vsnip-jump-prev)"
  else
    -- If <S-Tab> is not working in your terminal, change it to <C-h>
    return t "<S-Tab>"
  end
end

vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
EOF

" Vim Test
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
let test#strategy = "dispatch"

" Fzf

" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
